{"version":3,"file":"fireworks.min.js","sources":["../ts/util.ts","../ts/particle.ts","../ts/things.ts","../ts/fireworks.ts"],"sourcesContent":["/**\n * Returns a random number between min and max\n * @param {number} min minimum number\n * @param {number} max maximum number\n */\nexport function random(min: number, max: number): number {\n  return Math.random() * (max - min) + min\n}\n\n/**\n * Tau is Pi multiplied by two.\n */\nexport const TAU = Math.PI * 2\n","import { random, TAU } from './util'\n\nexport type Point = {\n  x: number\n  y: number\n}\n\ntype ParticleOptions = {\n  position: Point\n  isRocket?: boolean\n  hue?: number\n  brightness?: number\n}\n\nexport default class Particle {\n  public isRocket: boolean\n  private positions: Point[]\n  private position: Point\n  private velocity: Point\n  private resistance: number\n  private gravity: number\n  private fade: number\n  private shrink: number\n  private size: number\n  private alpha: number\n  private hue: number\n  private brightness: number\n\n  constructor({\n    isRocket = false,\n    hue = random(1, 360),\n    brightness = random(50, 60),\n    position,\n  }: ParticleOptions) {\n    this.isRocket = isRocket\n    this.position = position\n    this.positions = [this.position, this.position, this.position]\n\n    if (this.isRocket) {\n      this.velocity = {\n        x: random(-3, 3),\n        y: random(-7, -3),\n      }\n      this.shrink = 0.999\n      this.resistance = 1\n    } else {\n      const angle = random(0, TAU)\n      const speed = Math.cos(random(0, TAU)) * 15\n      this.velocity = {\n        x: Math.cos(angle) * speed,\n        y: Math.sin(angle) * speed,\n      }\n      this.shrink = random(0, 0.05) + 0.93\n      this.resistance = 0.92\n    }\n\n    this.gravity = 0.01\n    this.size = 3\n    this.alpha = 1\n    this.fade = 0\n    this.hue = hue\n    this.brightness = brightness\n  }\n\n  /**\n   * Clones a particle, same hue/brightness/position\n   * @returns {Particle} new particle\n   */\n  clone(): Particle {\n    return new Particle({\n      position: {\n        x: this.position.x,\n        y: this.position.y,\n      },\n      hue: this.hue,\n      brightness: this.brightness,\n    })\n  }\n\n  /**\n   * Checks if a particle should be removed.\n   * @param particle particle to check\n   * @returns {boolean} whether or not the particle should be removed.\n   */\n  shouldRemove(cw: number, ch: number): boolean {\n    if (this.alpha <= 0.1 || this.size <= 1) {\n      return true\n    }\n\n    if (this.position.x > cw || this.position.x < 0) {\n      return true\n    }\n\n    if (this.position.y > ch || this.position.y < 0) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Determines if a rocket should explode - based on explosionHeight & explosionChance\n   * @param {Particle} particle rocket to check\n   * @returns {boolean} whether or not the rocket shoudl explode\n   */\n  shouldExplode(maxHeight: number, minHeight: number, chance: number): boolean {\n    if (!this.isRocket) {\n      return false\n    }\n\n    // make sure things explode once they hit explosionMaxHeight (90% default) of height\n    if (this.position.y <= maxHeight) {\n      return true\n    }\n\n    // make sure particle has reached explosionMinHeight (20% default) before explosion chance.\n    if (this.position.y >= minHeight) {\n      return false\n    }\n\n    return random(0, 1) <= chance\n  }\n\n  /**\n   * Update the position of the particle.\n   * For rockets, has a potential to explode.\n   */\n  update(): void {\n    this.positions.pop()\n    this.positions.unshift({ x: this.position.x, y: this.position.y })\n    this.velocity.x *= this.resistance\n    this.velocity.y *= this.resistance\n    this.velocity.y += this.gravity\n    this.position.x += this.velocity.x\n    this.position.y += this.velocity.y\n    this.size *= this.shrink\n    this.alpha -= this.fade\n  }\n\n  /**\n   * Renders a particle. Returns whether or not it should exist.\n   * @param {CanvasRenderingContext2D} ctx canvas context\n   */\n  draw(ctx: CanvasRenderingContext2D): void {\n    const lastPosition = this.positions[this.positions.length - 1]\n    ctx.beginPath()\n    ctx.moveTo(lastPosition.x, lastPosition.y)\n    ctx.lineTo(this.position.x, this.position.y)\n    ctx.lineWidth = this.size\n    ctx.lineCap = 'round'\n    ctx.strokeStyle = `hsla(${this.hue}, 100%, ${this.brightness}%, ${this.alpha})`\n    ctx.stroke()\n  }\n}\n","import Particle, { Point } from './particle'\nimport { random } from './util'\n\ntype ThingOptions = {\n  cw: number\n  ch: number\n  maxRockets: number\n  numParticles: number\n  rocketInitialPoint: number\n  cannons: Point[]\n}\n\nexport default class Things {\n  private _set: Set<Particle>\n  private maxRockets: number\n  private numParticles: number\n  public cw: number\n  public ch: number\n  public rockets: number\n  public rocketInitialPoint: number\n  private cannons: Point[]\n\n  constructor({\n    maxRockets,\n    numParticles,\n    cw,\n    ch,\n    rocketInitialPoint,\n    cannons,\n  }: ThingOptions) {\n    this._set = new Set()\n    this.rockets = 0\n    this.maxRockets = maxRockets\n    this.numParticles = numParticles\n    this.cw = cw\n    this.ch = ch\n    this.rocketInitialPoint = rocketInitialPoint\n\n    this.cannons = cannons\n\n    if (this.rocketInitialPoint) {\n      this.cannons.push({ x: this.rocketInitialPoint, y: this.ch })\n    }\n  }\n\n  size(): number {\n    return this._set.size\n  }\n\n  entries(): Set<Particle> {\n    return this._set\n  }\n\n  clear(): void {\n    this._set.clear()\n    this.rockets = 0\n  }\n\n  delete(thing: Particle): void {\n    this._set.delete(thing)\n    if (thing.isRocket) this.rockets--\n  }\n\n  add(thing: Particle): void {\n    this._set.add(thing)\n  }\n\n  /**\n   * Turn a particle into many particles exploding in different directions.\n   * Rocket is deleted afterwards,\n   * @param {Particle} particle the rocket to start from.\n   */\n  explode(particle: Particle): void {\n    for (let i = 0; i < this.numParticles; i += 1) {\n      this.add(particle.clone())\n    }\n    this.delete(particle)\n  }\n\n  /**\n   * Spawns a single rocket\n   */\n  spawnRocket(): void {\n    this.rockets++\n    const cannonIndex = Math.floor(random(0, this.cannons.length))\n    const cannon = this.cannons[cannonIndex] || ({} as Point)\n    this.add(\n      new Particle({\n        isRocket: true,\n        position: {\n          ...cannon,\n          ...(cannon.x == null && { x: random(0, this.cw) }),\n          ...(cannon.y == null && { y: this.ch }),\n        },\n      })\n    )\n  }\n\n  /**\n   * if we have less than required number of rockets, spawn one.\n   * this mutates the Set, adding more rockets.\n   */\n  spawnRockets(): void {\n    if (this.rockets < this.maxRockets) {\n      this.spawnRocket()\n    }\n  }\n}\n","import { Point } from './particle'\nimport Things from './things'\n\ntype Options = {\n  maxRockets?: number\n  numParticles?: number\n  explosionMinHeight?: number\n  explosionMaxHeight?: number\n  explosionChance?: number\n  rocketSpawnInterval?: number\n  width?: number\n  height?: number\n  rocketInitialPoint?: number\n  cannons?: Point[]\n}\n\nexport default class Fireworks {\n  private container: HTMLElement\n  private maxRockets: number\n  private rocketSpawnInterval: number\n  private cw: number\n  private ch: number\n  private minH: number\n  private maxH: number\n  private chance: number\n  private things: Things\n  private interval: number\n  private rafInterval: number\n\n  private finishCallbacks: Array<() => void> = []\n\n  private canvas: HTMLCanvasElement\n  private ctx: CanvasRenderingContext2D\n  private pixelRatio: number\n\n  constructor(\n    container: HTMLElement,\n    {\n      rocketSpawnInterval = 150,\n      maxRockets = 3,\n      numParticles = 100,\n      explosionMinHeight = 0.2,\n      explosionMaxHeight = 0.9,\n      explosionChance = 0.08,\n      width = container.clientWidth,\n      height = container.clientHeight,\n      rocketInitialPoint = null,\n      cannons = [],\n    }: Options = {}\n  ) {\n    this.container = container\n    this.rocketSpawnInterval = rocketSpawnInterval\n    this.maxRockets = maxRockets\n    this.cw = width\n    this.ch = height\n    this.maxH = this.ch * (1 - explosionMaxHeight)\n    this.minH = this.ch * (1 - explosionMinHeight)\n    this.chance = explosionChance\n    this.pixelRatio = window.devicePixelRatio || 1\n    this.canvas = document.createElement('canvas')\n    this.ctx = this.canvas.getContext('2d')\n\n    container.appendChild(this.canvas)\n\n    this.things = new Things({\n      maxRockets: this.maxRockets,\n      numParticles,\n      cw: this.cw,\n      ch: this.ch,\n      rocketInitialPoint,\n      cannons,\n    })\n    this.updateDimensions()\n  }\n\n  destroy(): void {\n    this.canvas.parentElement.removeChild(this.canvas)\n    window.clearInterval(this.interval)\n    window.cancelAnimationFrame(this.rafInterval)\n  }\n\n  start(): () => void {\n    if (this.interval != null) return\n    this.interval = window.setInterval(\n      () => this.things.spawnRockets(),\n      this.rocketSpawnInterval\n    )\n    this.rafInterval = window.requestAnimationFrame(() => this.update())\n    return (): void => this.stop()\n  }\n\n  private updateDimensions(): void {\n    this.canvas.width = this.cw * this.pixelRatio\n    this.canvas.height = this.ch * this.pixelRatio\n    this.canvas.style.width = `${this.cw}px`\n    this.canvas.style.height = `${this.ch}px`\n    this.ctx.scale(this.pixelRatio, this.pixelRatio)\n    this.things.cw = this.cw\n    this.things.ch = this.ch\n  }\n\n  setSize(width: number, height: number): void {\n    this.cw = width\n    this.ch = height\n    this.updateDimensions()\n  }\n\n  resetSize(): void {\n    this.cw = this.container.clientWidth\n    this.ch = this.container.clientHeight\n    this.updateDimensions()\n  }\n\n  stop(): void {\n    window.clearInterval(this.interval)\n    this.interval = null\n  }\n\n  kill(): void {\n    this.things.clear()\n    this.stop()\n    window.cancelAnimationFrame(this.rafInterval)\n    this._finish()\n  }\n\n  fire(): void {\n    this.things.spawnRocket()\n    if (!this.rafInterval) {\n      this.rafInterval = window.requestAnimationFrame(() => this.update())\n    }\n  }\n\n  onFinish(cb: () => void): void {\n    this.finishCallbacks.push(cb)\n  }\n\n  private _clear(force = false): void {\n    this.ctx.globalCompositeOperation = 'destination-out'\n    this.ctx.fillStyle = `rgba(0, 0, 0 ${force ? '' : ', 0.5'})`\n    this.ctx.fillRect(0, 0, this.cw, this.ch)\n    this.ctx.globalCompositeOperation = 'lighter'\n  }\n\n  private _finish(): void {\n    this._clear(true)\n    this.rafInterval = null\n    this.finishCallbacks.forEach((cb) => cb())\n  }\n\n  update(): void {\n    this._clear()\n\n    for (const particle of this.things.entries()) {\n      particle.draw(this.ctx)\n      particle.update()\n\n      if (particle.shouldRemove(this.cw, this.ch)) {\n        this.things.delete(particle)\n      } else if (particle.shouldExplode(this.maxH, this.minH, this.chance)) {\n        this.things.explode(particle)\n      }\n    }\n\n    if (this.interval || this.things.size() > 0) {\n      this.rafInterval = window.requestAnimationFrame(() => this.update())\n    } else {\n      this._finish()\n    }\n  }\n}\n"],"names":["random","min","max","Math","TAU","PI","_a","_b","isRocket","_c","hue","_d","brightness","position","this","positions","velocity","x","y","shrink","resistance","angle","speed","cos","sin","gravity","size","alpha","fade","Particle","cw","ch","maxHeight","minHeight","chance","pop","unshift","ctx","lastPosition","length","beginPath","moveTo","lineTo","lineWidth","lineCap","strokeStyle","stroke","maxRockets","numParticles","rocketInitialPoint","cannons","_set","Set","rockets","push","Things","clear","thing","add","particle","i","clone","cannonIndex","floor","cannon","spawnRocket","container","rocketSpawnInterval","_e","_f","explosionMinHeight","_g","explosionMaxHeight","_h","explosionChance","_j","width","clientWidth","_k","height","clientHeight","_l","_m","maxH","minH","pixelRatio","window","devicePixelRatio","canvas","document","createElement","getContext","appendChild","things","updateDimensions","Fireworks","parentElement","removeChild","clearInterval","interval","cancelAnimationFrame","rafInterval","setInterval","_this","spawnRockets","requestAnimationFrame","update","stop","style","scale","_finish","cb","finishCallbacks","force","globalCompositeOperation","fillStyle","fillRect","_clear","forEach","__values","entries","draw","shouldRemove","shouldExplode","explode"],"mappings":"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"}